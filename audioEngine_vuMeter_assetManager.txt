Urakawa Application Components: AudioEngine, AudioPlayer, AudioRecorder, VuMeter, AssetManager
Overview and Interface definitions
last edit mgylling 20060314

1. AudioEngine Overview
2. VuMeter Overview 
3. AssetManager Overview
4. Interfaces
5. Classes


1. AudioEngine Overview 
The main purposes of AudioEngine are
 - to capture sound (wave data) from a system input device
 - to play sound data (from physical files or memory buffers) to a system output device
 AudioEngine achieves these purposes by instantiating and holding one instance each of AudioPlayer and AudioRecorder 
 AudioEngine can be implemented using the Singleton pattern. 
 Only one instance each of AudioPlayer and AudioRecorder are allowed simultaneously
    
2. VuMeter Overview 
The main purposes of VuMeter are:
 - to render a graphical representation of sound level of the currently played wavefile
 - to report level peak events (1 sample above a settable treshold)
 - to report levels that are consistently too low (under a settable RMS treshold)
 - to concurrently to graphical rendering expose textual representations of peaks and levels [accessibility]

VuMeter passes recieved buffers through to any number of listeners, and can thus be part of a chain
VuMeter is fully reentrant, ie several VuMeters may be instantiated simultaneously at runtime.
   
3. AssetManager Overview 
The main purposes of AssetManager are:
 - provide handles to the physical files that constitute the MediaAssets of a project
 - allow new physical assets to be created (for example, pipe wave data buffers to a file)
 - draw pictures of asset chunks on rendering surfaces
 
AssetManager can be implemented using the Singleton pattern. 
 

4. Interfaces

IAudioEngine
 AudioPlayer getAudioPlayer() 
 Audiorecorder getAudioRecorder()
  
IAudioPlayer
 OutputDevice setOutputDevice(OutputDevice) throws AudioPlayerException
 OutputDevice getCurrentOutputDevice()
 void play(AudioMediaAsset wave) throws AudioPlayerException
 void play(AudioMediaAsset wave, double bytePositionToStartFrom) throws AudioPlayerException
 void play(AudioMediaAsset wave, long timePositionToStartFrom) throws AudioPlayerException
 void play(ByteBuffer buf) throws AudioPlayerException 
 void stopPlaying()
 double getCurrentBytePosition() [returns current position in bytes of current AudioMediaAsset]
 long getCurrentTimePosition() [returns current position in time (milliseconds) of current AudioMediaAsset] 
 void setAudioPlayerListener(IAudioPlayerListener listener)
 Collection<IAudioPlayerListener> getAudioPlayerListeners()
 IAudioPlayerListener getAudioPlayerListener(int i)  
 int getState() [returns states such as playing, idle, initializing]
 
IAudioPlayerListener
 [listens to events raised by IAudioPlayer]
 void audioPlayerStateChangedEvent(constant state) [recieves notification of state changes(such as playing, idle, initializing)]
 void audioPlayerReachedEndOfFileEvent()
 
IAudioRecorder
 InputDevice setInputDevice(InputDevice) throws AudioRecorderException
 InputDevice getCurrentInputDevice()
 void setNumberOfChannels(int number) throws AudioRecorderException
 void setSampleRate(int rate) throws AudioRecorderException
 void setBitDepth(int depth) throws AudioRecorderException 
 void record(AudioMediaAsset wave) throws AudioRecorderException 
 void stopRecording() 
 void setAudioRecorderListener(IAudioRecorderListener listener)
 Collection<IAudioRecorderListener> getAudioRecorderListeners()
 IAudioPlayerListener getAudioRecorderListener(int i)  
 int getState() (returns states such as recording, idle, initializing)

IAudioRecorderListener
 [listens to events raised by IAudioRecorder]
 void audioRecorderStateChangedEvent(constant state)[recieves notification of state changes(such as recording, idle, initializing)]
   
IVuMeter
 void streamIn(ByteBuffer stream) [an incoming buffer of bytes to analyse and render] 
 WindowsForm setGraphicalRenderingSurface(WindowsForm form) throws VuMeterException
 WindowsForm getGraphicalRenderingSurface()
 WindowsForm setTextualRenderingSurface(WindowsForm form) throws VuMeterException
 WindowsForm getTextualRenderingSurface()
 void setPeakWarningLevel(int sampleLevel) throws VuMeterException
 void setTooLowRmsWarningLevel(int rmsLevel) throws VuMeterException
 void setVuMeterListener(IVuMeterListener listener)
 Collection<IVuMeterListener> getVuMeterListeners()
 IVuMeterListener getVuMeterListener(int i) 
 int getState() (return states such as rendering, analysing, idle)
 [may want to add additional functions to allow non-realtime modes for analysing existing wavefiles]
 
IVuMeterListener 
 [listens to events raised by IVuMeter]
 void vuMeterPeakOverloadEvent(String measure, double bytePosition)
 void vuMeterPeakOverloadEvent(String measure, long timePosition)
 void vuMeterLevelTooLowEvent(String measure, double bytePositionStartOfRange, double bytePositionEndOfRange)
 void vuMeterLevelTooLowEvent(String measure, long timePositionStartOfRangeMillis, long timePositionEndOfRangeMillis) 
 void vuMeterStreamFromMeter(ByteBuffer stream) [VuMeter always pass buffers through itself so that it can be part of a chain]
 void vuMeterStateChangedEvent(constant state)[recieves notification of state changes(such as rendering, analysing, idle)]
   
IAssetManager 
 Collection<MediaAsset> getAssets()
 Collection<MediaAsset<SubType>> getAssets(constant assetType)
 MediaAsset getAsset(String assetLocalName) throws AssetManagerException 
 MediaAsset getAsset(URL assetURL) throws AssetManagerException 
 MediaAsset newAsset(int MediaAssetType) throws AssetManagerException [example: initializes a new outputstrem and gives it a name, feeds a recorded audiostream into the file]
 void deleteAsset(MediaAsset assetToDelete) throws AssetManagerException 
 MediaAsset copyAsset(MediaAsset source, MediaAsset dest, boolean replaceIfExisting) throws AssetManagerException 
 MediaAsset renameAsset(MediaAsset source, String newName) throws AssetManagerException 
 void addAsset(URL assetURL) throws AssetManagerException 
 void addAssets(Collection assetURLs) throws AssetManagerException 

abstract IMediaAsset  
  String getName()
  constant getType() [returns the MediaAsset type, else use reflection 'instanceof']
  abstract String getMediaType [returns the MIME type string]
  double getSizeInBytes()
  File getFile()
  boolean exists()
  boolean canRead()
  boolean canWrite()
  URL getURL()
  FileReader getFileReader()
  abstract boolean validate() [performs integrity check on an asset, subtype dependent)  
  abstract void draw(WindowsForm surfaceToDrawOn) throws MediaAssetException [draws the whole file]

IAudioMediaAsset  
  void appendByteBuffer(ByteBuffer buf) throws MediaAssetException [only support appending to the end of wavefiles]
  ByteBuffer getChunk(double byteStartPosition, double byteEndPosition) throws MediaAssetException 
  ByteBuffer getChunk(long timeStartPositionMillis, double timeEndPositionMillis) throws MediaAssetException 
  void deleteChunk(double byteStartPosition, double byteEndPosition) throws MediaAssetException 
  void deleteChunk(long timeStartPositionMillis, long timeEndPositionMillis) throws MediaAssetException 
  long getLengthInMillis()
  void draw(WindowsForm surfaceToDrawOn, double byteStartPosition, double byteEndPosition) throws MediaAssetException  [draws a part of the file]
  void draw(WindowsForm surfaceToDrawOn, long timeStartPositionMillis, long timeEndPositionMillis) throws MediaAssetException  [draws a part of the file]
      
5. Classes

AudioEngine implements IAudioPlayerListener, IAudioRecorderListener, IVuMeterListener
  AudioPlayer implements IAudioPlayer [extends MediaRenderer]
  AudioRecorder implements IAudioRecorder [extends MediaCapturer]

VuMeter implements IVuMeter
  
AssetManager implements IAssetManager
  
abstract MediaAsset implements IMediaAsset

AudioMediaAsset implements IAudioMediaAsset extends MediaAsset
  instantiator: AudioMediaAsset(String name, int channels, int sampleRate, int bitDepth) 

