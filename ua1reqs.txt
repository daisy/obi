The Urakawa Application First Iteration Requirements


Julien Quint <julien@daisy-for-all.org>
First draft, Monday 20 February 2006

This document summarizes the requirements for the first iteration of the
Urakawa Application (UA.) This application will be built on top of the Urakawa
Toolkit (UT) and will be used to demonstrate and test some of its features.

1 Feature List

 1. Import and export of Daisy 2.02 and Daisy 3 digital talking books,
    including full text, full audio and graphics.
 2. Addition and recording of resources (additional text and/or audio segments
    that can assist the reader in using a Daisy book.)
 3. Import of DTBook file and creation of audio through speech synthesis or
    live audio recording.
 4. Management of skippable and escapable structures.
 5. Manipulation of the navigation features of a book.
 6. Coarse-grained editing of the text.
 7. International language support.
 8. Full Accessibility.

1.1 Import and Export

The UA should support import and export of both Daisy 2.02 and Z books.
Depending on what the UT finally implements, we may have to do our own
conversion, or rely on external tools such as DMFC. Back-conversion (from Z to
2.02) may also be restricted.

One advantage of supporting both formats is that the users can then upgrade
their books from one version of Daisy to the next. New features, such as
skippable items or resources, can then be added to an “old” book.

1.2 Addition and Recording of Resources

The Z spec introduces resources. When creating new books (see below) or editing
/upgrading existing books, the producer can add resources such as chapter
titles, custom audio for page numbers, etc.

In order to add these resources, the UA will need to provide its own sound
recording and editing facility. The UA sound editor should have a GUI to allow
visualization of the waveforms and at least feature:

  • support for DAISY audio formats (PCM, ADPCM2, MPEG-1/2 Layer 2/3, and
    MPEG-4 AAC) both for import and export;
  • live recording;
  • basic editing (cut, copy, paste, delete...);
  • basic sound processing (change volume, speed and pitch, insert silence,
    noise removal, equalization...);
  • sentence detection (?), or at least a concept of “phrases”.

1.3 Import of DTBook file

The UA will not feature a markup editor so any DTBook file is provided
externally, although minimal editing will be possible (see below.) Starting
from the DTBook file we can generate a skeleton for the book. The NCX is
automatically extracted from the DTBook file, and the phrases can be identified
by the original markup or a sentence detector.

Providing audio can then be done automatically through TTS, with automatic
synchronization of the text and the audio, or through live recording, as for
resources. The exact specification of this feature (live audio recording by a
narrator) remains to be determined.

1.4 Skippable and Escapable Structures

Escapable structures are tied to resources as each structure marked as
escapable must have a corresponding resource. Skippable structures management
entails that the UA provides a UI layer to the author to manage custom tests
and attributes. Some presets should be provided, with the ability for the
author to customize further the behavior of their books.

1.5 Navigation Features

The minimal support for navigation features is the management of the main
navigation map, through basic editing such as cut, copy, paste, delete,
duplicate, show/hide (hiding an item would hide it, and remove it when
exporting it, but would still be kept in the internal representation and could
be shown again at any time.)

If it is supported by the UT, exporting a whole map or sections of a map, as
well as importing navigation items into an existing map, would be a welcome
addition.

1.6 Text Editing

As the text markup happens outside of the UA, the first objective with regards
to text editing is to make sure that external modifications of the textual
documents can be made easily and that the text can be re-imported with minimal
loss of information. Additionally, editing the TOC of a book is an easy way to
modify the structure of a document by moving or deleting sections as a whole.

We should try to make it possible to make small changes to the text, such as
correcting a typo or deleting a sentence possible, while maintaining the
validity of the underlying DTBook document. This may open a can of worm as we
do not want to provide full support for markup so this feature will require
some care in its exact specification.

1.7 International Language Support

Support for language other than English needs to be built-in from day one. This
includes handling of text in any language supported by Unicode, multilingual
books, bidirectional text, language-dependent sentence detection, etc.

We are currently working on a localization framework for AMIS, and we plan to
use this framework for the localization of the UA.

1.8 Full Accessibility

An overreaching goal to keep in mind is that the UA should be fully usable by
persons with disability without any need for external help or supervsion. In
the case of blind users, or users with low visibility, this means that the UA
should work with screen readers or be self-voicing. The first choice is
probably the best, as the cost of producing voice prompts for an application is
very high and makes further developments extremely complicated. The downside
being of course that speakers of languages for which there is no readily
available screen reader or speech synthesizer are at a disadvantage.

2 User Interface Principles and Usability

DAISY is aimed at a varied audiences, including people with visual or cognitive
disabilities. Therefore we should work towards making a tool to not only read
but also create DAISY books available to these audiences. The DAISY For All
project also trains users all over the world to create DAISY books and an
easier production tool would make the trainings much more efficient. Therefore,
ease of use and accessibility of the interface should be our main concern, to
the possible detriment of more powerful capabilities.

Key points (to be completed): multiple, but simple views; use of HTML for
accessible, internationalizable and customizable interface (verbose, with only
images, just text, etc.) rather than relying on common widgets; extensibility
through scripting (see below.)

3 Implementation and Technical Considerations

The implementation will be in two main phases. The first phase is the
prototyping phase and ends March, 31st. By this time it is expected that the
high-level design of the application is set and a mockup is built. The mockup
can be used to demonstrate a typical usage scenario of the application from
start to finish of a project. The first version of the actual application will
then be implemented during the second phase, from April to August of 2006.

The language of choice for the application prototype is C# using Windows Forms.
It is expected that application itself will be mostly written in C#, with
possible inclusion of C++ (at the very least for interfacing with the toolkit.)

An additional implementation point is that we could include scripting
capabilities in the application, using a lightweight scripting language such as
Guile or Lua. This would allow a quick implementation of some features, and the
possibility of power users to add their own features.
