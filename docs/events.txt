# Obi events

`$Id$`

This document describes Obi's eventing and summarizes how to introduce new
features in the application.

<div id="toc">Table of Contents</div>


## Obi components

The main problem is to synchronize the Obi project and its views, so that a
change in one is reflected in the others. Most changes happen through one
view, are effected in the project, and shown in the other views.

### Project

#### `Project`

`Project` is the object representing the whole Obi project currently being
edited; basically the presentation (tree of section and phrase nodes with
reference to media objects) and metadata. In this document, the former only
is detailed.

As of this writing, `Project` sends the following events (listed
alphabetically):

* `AddedPhraseNode`: a phrase node was added.
* `CommandCreated`: a new command was issued.
* `DeletedPhraseNode`: a phrase node was deleted.
* `MediaSet`: a media object (text or audio) was set on a node.
* `StateChanged`: the project was closed, modified, opened, or saved.
* `ToggledNodeUsedState`: a node was marked as used or unused.
* `TouchedNode`: a node was somehow modified.

When implementing new features, new events may be added, but it is probably
best to try and keep the list as short as possible. For instance (just
thinking aloud) maybe `MediaSet`, `TouchedNode` and `ToggledNodeUsedState`
could be merged.

The corresponding view for the project is the project panel, which manages
the TOC view, the strip view, and the transport bar.

#### `SectionNode`

Section nodes represent a section in the book. `SectionNode` inherits from
`ObiNode` which in turn inherits from `CoreNode`.  They have other section
nodes and phrase nodes as children. Because of this mixed content model, we
have convenience methods to pretend that we have two independent lists of
children nodes.

The corresponding view for a section node is either an entry in the TOC
panel or a section strip.

#### `PhraseNode`

Phrase nodes represent phrases in the book (local navigation units.) They
have audio content and may have an annotation, but no children. Convenience
methods allow to get the parent as a `SectionNode` and manage the media data
associated with the node.

The corresponding view for a phrase node is an audio block (and an
annotation block) in the strip view.

### Views

#### `ProjectPanel`

The main view for the project.

#### `TOCPanel`

#### `StripManagerPanel`

#### `SectionStrip`

#### `AudioBlock`

#### `AnnotationBlock`

#### `TransportBar`


## Example event sequence

### Overview

1. User chooses from menu
2. Change is made in `Project`; command is issued and project is marked as
modified
3. `Project` fires events (project modified, command created, change made)
4. Events are caught by views
5. Views are updated

### Example: _Mark audio block as unused_

1. `mMarkAudioBlockAsUnusedToolStripMenuItem_Click()` (in __`ObiForm`__) is
activated from the main menu, or `ToggleSelectedAudioBlockUsed()` (in
__`StripManagerPanel`__) is activated from the context menu in the strip
view.

2. This is handled in __`Project`__ by `ToggleNodUsedWithCommand()`. Note
that there is an intermediary step to just get the right arguments to the
function (here, the node currently selected, and the `deep` flag set to
`false` which doesn't matter anyway since we're dealing with phrase nodes.)

3. `ToggleNodeUsedWithCommand()` modifies the tree and fires the following
events (we'll concentrate on the first one only as the others shouldn't need
to change when we add new features):
  * `ToggleNodeUsedState` indicating that this node's state has changed;
  * `StateChanged` indicating that the project was modified;
  * `CommandCreated` indicating that a new command was issued.

4. `ToggleNodeUsedState` is caught by both the strip view and the TOC view
since the change can be seen in both of these views. The two handlers are
set in the `SetEventHandlers()` method of __`ProjectPanel`__. The one that
interests us here is `ToggledNodeUsedState()` in __`StripManagerPanel`__ (as
the change to an audio block doesn't show in the section view.)

5. `ToggleNodeUsedState()` calls `RefreshUsed()` for the block to show its
new status. Voil√†!


## Adding a new feature

Let's see how to add _Mark audio block as section heading_ to make a selected
audio block be the heading for its parent section (I'm only concentrating on
the event stuff here of course.)

### Menu items

* Find the right application-wide menu to add the new feature in. __NOTE__:
we need to reorganize the top-level menus a bit. For the moment, the
_Strips_ menu will have to do.

* Find a new shortcut/accelerator and add the new menu item to
[menus.txt](menus.txt) __and keep this file up-to-date__. I picked up `d`
for the accelerator, and `Ctrl+F` as the shortcut key (not many left!)

* Do the same (same shortcut key; accelerator had to change to `i`) for
the corresponding context menu; here the one for the strip view.

* Maintain the enabled property of the new menu items: in the main menu,
this is done by `UpdateEnabledItems()` in __`ObiForms`__ (here, the actual
method that is modified is `UpdateEnabledItemsForStripsMenu()`) and in the
context menus look for `UpdateEnabledItemsForContextMenu()`.

* Now generate methods for both, which should end up calling the same method
in the project panel in the end. Here I created the method
`MarkSelectedAudioBlockAsHeading()` in __`StripManagerPanel`__ which then
calls the `MakePhraseHeading()` method in __`Project`__ to make the change
actually happen. We're getting there.

### Synchronization event

Add a new event to the project, or reuse an existing one. A new handler
may also be necessary, as well as an EventArgs subclass for the argument.
Here I created a new `SectionNodeHeadingHandler` in
`Obi/Events/Node/NodeEventHandlers.cs` and a new `SectionNodeHeadingEventArgs`
subclass of `SectionNodeEventArgs`. I now have:

    public event Events.SectionNodeHeadingHandler HeadingChanged;

in `Project`.

We now need to throw the event somewhere in `MakePhraseHeading()` but also
to catch it. Here is a simpler version of where it is thrown (in
`Project.Block.cs`):

    public void MakePhraseHeading(PhraseNode phrase)
    {
        PhraseNode previous = phrase.ParentSection.Heading;
        phrase.ParentSection.Heading = phrase;
        HeadingChanged(this, new Events.Node.SectionNodeHeadingEventArgs(this,
            phrase.ParentSection, previous));
        Modified();
    }

The project panel will register the handler for the event (in
`ProjectPanel.cs`):

    private void SetEventHandlers(Project project)
    {
        ...
        project.HeadingChanged += new
            Obi.Events.SectionNodeHeadingHandler(mStripManagerPanel.SyncHeadingChanged);
    }

    private void UnsetEventHandlers()
    {
        ...
        mProject.HeadingChanged -= new
            Obi.Events.SectionNodeHeadingHandler(mStripManagerPanel.SyncHeadingChanged);
    }

The second part is necessary to unregister the handler when the project is
closed; I think we can do better than that though.

### Undo and redo

We need to add undo and redo now.
