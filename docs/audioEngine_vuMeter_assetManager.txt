Urakawa Application Components: AudioEngine, AudioPlayer, AudioRecorder, VuMeter, AssetManager
Overview and Interface definitions
last edit mgylling 20060314

1. AudioEngine Overview
2. VuMeter Overview 
3. AssetManager Overview
4. Interfaces
5. Classes

1. AudioEngine Overview 
The main purposes of AudioEngine are
 - to capture sound (wave data) from a system input device
 - to play sound data (from physical files or memory buffers) to a system output device
 AudioEngine achieves these purposes by instantiating and holding one instance each of AudioPlayer and AudioRecorder.
 AudioPlayer and AudioRecorder will be implemented using DirectX. (see www.codeproject.com for examples)
 AudioEngine can be implemented using the Singleton pattern. 
 Only one instance each of AudioPlayer and AudioRecorder are allowed simultaneously, ie these are singletons too.
    
2. VuMeter Overview 
The main purposes of VuMeter are:
 - to render a graphical representation of sound level of the currently played wavefile
 - to report level peak events (1 sample above a settable amplitude threshold), for example the tresh
 - to report levels that are consistently too low (RMS-like measure under a settable threshold)
 - to concurrent to graphical rendering, expose textual representations of peaks and levels [accessibility]

The VuMeter is separated into two compontents: the VuMeter object itself (containing logic) and a VuMeter widget.
Several VuMeters may be instantiated simultaneously at runtime.
VuMeter graphic: a bar with green, yellow and red areas. Text indicator reset button.
   
3. AssetManager Overview 
The main purposes of AssetManager are:
 - provide access to the physical files that constitute the MediaAssets of a project
 - allow new physical assets to be created (for example, pipe wave data buffers to a file (ie audioRecorder does not save to disk))
 
AssetManager is implemented using the Singleton pattern. 
 

4. Interfaces
Note: the interface definition section below uses conceptual pseudocode; parameters and return types use types and names
that do not map to C# datatypes and .net primitives.

IAudioEngine
 AudioEngine getInstance()
 AudioPlayer getAudioPlayer() 
 AudioRecorder getAudioRecorder()
  
IAudioPlayer
 OutputDevice setOutputDevice(OutputDevice) throws AudioPlayerException
 OutputDevice getCurrentOutputDevice()
 void play(AudioMediaAsset wave) throws AudioPlayerException
 void play(AudioMediaAsset wave, double bytePositionToStartFrom) throws AudioPlayerException
 void play(AudioMediaAsset wave, long timePositionToStartFrom) throws AudioPlayerException
 void play(ByteBuffer buf) throws AudioPlayerException 
 void stopPlaying()
 double getCurrentBytePosition() [returns current position in bytes of current AudioMediaAsset]
 long getCurrentTimePosition() [returns current position in time (milliseconds) of current AudioMediaAsset] 
 void setAudioPlayerListener(IAudioPlayerListener listener)
 Collection<IAudioPlayerListener> getAudioPlayerListeners()
 IAudioPlayerListener getAudioPlayerListener(int i)  
 constant getState() [returns states such as playing, idle, initializing]
 
IAudioPlayerListener
 [listens to events raised by an implementor of IAudioPlayer]
 void audioPlayerStateChangedEvent(constant state) [recieves notification of state changes(such as playing, idle, initializing)]
 void audioPlayerReachedEndOfFileEvent()
 
IAudioRecorder
 InputDevice setInputDevice(InputDevice) throws AudioRecorderException
 InputDevice getCurrentInputDevice()
 void setNumberOfChannels(int number) throws AudioRecorderException [allowed values: 1, 2]
 void setSampleRate(int rate) throws AudioRecorderException [allowed values: 22050, 44100, 88200, 96000]
 void setBitDepth(int depth) throws AudioRecorderException  [allowed values: 16, 24, 32]
 void record(AudioMediaAsset wave) throws AudioRecorderException 
 void stopRecording() 
 void setAudioRecorderListener(IAudioRecorderListener listener)
 Collection<IAudioRecorderListener> getAudioRecorderListeners()
 IAudioPlayerListener getAudioRecorderListener(int i)  
 constant getState() (returns states such as recording, idle, initializing)

IAudioRecorderListener
 [listens to events raised by an implementor of IAudioRecorder]
 void audioRecorderStateChangedEvent(constant state)[recieves notification of state changes(such as recording, idle, initializing)]
   
IVuMeter
 void streamIn(ByteBuffer stream) [an incoming buffer of bytes to analyse and render] 
 void setGraphicalWidget(WindowsForm.DrawingArea) throws VuMeterException
 void setTextualWidget(WindowsForm.TextArea) throws VuMeterException
 WindowsForm.DrawingArea getGraphicalWidget() 
 WindowsForm.TextArea getTextualWidget() 
 void setPeakWarningLevel(int sampleLevel) throws VuMeterException
 int getPeakWarningLevel() 
 void setTooLowRmsWarningLevel(int rmsLevel) throws VuMeterException
 int getTooLowRmsWarningLevel()
 void resetStatistics() [resets peak and rms counts]


 [may want to add additional functions to allow non-realtime modes for analysing existing wavefiles]
 
IVuMeterListener 
 [listens to events raised by an implementor of IVuMeter]
 void vuMeterPeakOverloadEvent(Object measureInfo, double bytePosition)
 void vuMeterPeakOverloadEvent(Object measureInfo, long timePosition)
 void vuMeterLevelTooLowEvent(Object measureInfo, double bytePositionStartOfRange, double bytePositionEndOfRange)
 void vuMeterLevelTooLowEvent(Object measureInfo, long timePositionStartOfRangeMillis, long timePositionEndOfRangeMillis)  
 void vuMeterStateChangedEvent(constant state)[recieves notification of state changes(such as rendering, analysing, idle)]
   
IAssetManager 
 AssetManager getInstance()
 Collection<MediaAsset> getAssets()
 Collection<MediaAssetSubType> getAssets(constant assetType)
 MediaAsset getAsset(String assetLocalName) throws AssetManagerException 
 MediaAsset getAsset(URL assetURL) throws AssetManagerException 
 MediaAsset newAsset(constant MediaAssetType) throws AssetManagerException [example: initializes a new outputstrem and gives it a name, feeds a recorded audiostream into the file]
 void deleteAsset(MediaAsset assetToDelete) throws AssetManagerException 
 MediaAsset copyAsset(MediaAsset source, MediaAsset dest, boolean replaceIfExisting) throws AssetManagerException 
 MediaAsset renameAsset(MediaAsset source, String newName) throws AssetManagerException 
 void addAsset(URL assetURL) throws AssetManagerException 
 void addAssets(Collection<URL> assetURLs) throws AssetManagerException 

IAssetManagerListener
  [listens to events raised by an implementor of IAssetManager]
  void assetManagerAssetRenamedEvent(String oldName, MediaAsset newAsset)
  void assetManagerAssetDeletedEvent(String name)

abstract IMediaAsset  
  String getName()
  abstract constant getType() [returns the MediaAsset type, else use reflection 'instanceof']
  abstract String getMediaType [returns the MIME type string]
  double getSizeInBytes()
  File getFile()
  boolean exists()
  boolean canRead()
  boolean canWrite()
  protected boolean delete()
  URL getURL()
  FileReader getFileReader()
  abstract boolean validate() [performs integrity check on an asset, subtype dependent)    

IAudioMediaAsset  
  void appendByteBuffer(ByteBuffer buf) throws MediaAssetException [only support appending to the end of wavefiles]
  ByteBuffer getChunk(double byteStartPosition, double byteEndPosition) throws MediaAssetException 
  ByteBuffer getChunk(long timeStartPositionMillis, double timeEndPositionMillis) throws MediaAssetException 
  void deleteChunk(double byteStartPosition, double byteEndPosition) throws MediaAssetException 
  void deleteChunk(long timeStartPositionMillis, long timeEndPositionMillis) throws MediaAssetException 
  long getLengthInMillis()
  int getSampleRate()
  int getNumberOfChannels()
  int getBitDepth()
      
5. Classes

AudioEngine implements IAudioPlayerListener, IAudioRecorderListener, IVuMeterListener
  AudioPlayer implements IAudioPlayer [extends MediaRenderer]
  AudioRecorder implements IAudioRecorder [extends MediaCapturer]

VuMeter implements IVuMeter
  
AssetManager implements IAssetManager
  
abstract MediaAsset implements IMediaAsset

AudioMediaAsset implements IAudioMediaAsset extends MediaAsset
  instantiator: AudioMediaAsset(String name, int channels, int sampleRate, int bitDepth) 
  