# Reference manual for Obi 1.0

`$Id$`

<div id="toc">Table of contents</div>

This is a reference manual for Obi, and for the moment a placeholder for the
final documentation. If you are a user and not a developer, you can ignore the
TODO items below. This manual describes version 1.0 Alpha at the moment and
may still be incomplete.


## Views

The work area of Obi is composed of several views, as described below. All
views (except for the strips view) can be shown or hidden as necessary.

### Strips view

The main view is the _strips view_. This is the view in which the contents of
the book are edited. There is a strip for every section in the book and they
appear in book order in the strips view. Inside each strip the actual contents
appear as blocks.

#### Strips

A _strip_ represents a section and its contents. Subsections are represented as
other strips that follow in the strip view. Contents are represented as blocks
which are shown in book order inside the strip. A strip fills the entire width
of the strips view and has two parts:

1. an editable label showing the title of the section;

2. a sequence of zero or more blocks.

TODO: fix the strip width.

#### Blocks

A _block_ is used to represent an unit of content in the strips view. A block
can be empty or contain audio. The audio content of a block is called a
_phrase_ as it allows for the reader to skip easily from phrase to phrase
when the book is exported to DAISY. Obi does not impose any limitations on
the amount of audio that a block may contain.

#### Different kinds of blocks

* _Empty blocks_ are blocks that contain no audio. They can be used as
  placeholders for adding audio at a later time. An empty block only contains
  an information label.

* _Plain blocks_ are blocks that contain audio. In addition to the information
  label, the waveform of the audio is displayed.

* _Page blocks_ are blocks that represent a page number. The corresponding
  phrase is usually a reading of the page number. An actual number is
  associated with the block. Example: page number 42 in the book can be
  represented by a page block bearing the number 42 and the phrase "page
  42." In the exported DAISY book, a page block will be skippable.

* _Heading blocks_ are used to mark the heading of a section. By default, this
  is the first used block in the section, but any other can be chosen. There
  can be at most one heading block per section. TODO: maintain this when
  merging sections.

* _Silence blocks_ are used for phrase detection; see below.

* _Custom blocks_ are blocks that have some additional property in the current
  book (such as producer notes, side bars, etc.) These can be defined by the
  producer of the book as needed. In the exported DAISY book, custom blocks
  will be skippable.

__Note:__ future versions of Obi will have _container blocks_ that can hold
other blocks to create escapable structures, such as lists or audio tables,
but they are not included in the current release of Obi.

### TOC view

The _table of contents view_ (_TOC view_ for short) shows the table of contents
of the book in a hierarchical way. Each entry in the table of contents is
called a _section_; this is a generic Obi term, and can be a book part,
chapter, section, subsection, etc. The level of each section is shown by its
indentation. As noted above, there is a corresponding strip for every section
in the TOC view.

### Metadata view

The _metadata view_ shows the metadata of the book: information such as title,
narrator, date of publication, etc. Metadata entries can be edited in this
view. TODO: the metadata view is currently not functional!

### Transport bar and peak meter

The _transport bar_ is used for recording and playback of the book. It has
buttons such as play, record, or stop; a time display; and a textual peak
meter. In addition to the transport bar, an external peak meter can also be
shown alongside Obi's main window.


## Selection

All edits in Obi are based on the current selection. In the current version of
Obi, only a single selection can be made at once (future versions of Obi will
have multiple selection.)

In general, selection is performed by clicking (and possibly dragging) on the
object or area to select; keyboard users can navigate to the desired region
to select (see keyboard navigation below.)

### What is selectable?

* In the strips view:
  * A strip is selectable.
  * The label of a strip is selectable. When selected, the label becomes
    editable.
  * A position inside a strip is selectable. The position can be before the
    first block, after the last block, or between two blocks.
  * A block inside a strip is selectable. To select a block, click on its label
    or its outer edge.
  * The waveform in a block is selectable; either a position or a range of
    audio. To select a position in the waveform, click once; to select a range,
    click then drag.
    * TODO: shift+click for a range.
    * TODO: dragging outside of the block kills the selection.
    * TODO: select all audio from a block.
* In the TOC view:
  * A section is selectable.
  * The text label of a section is selectable. When selected, it becomes
    editable.
* In the metadata view:
  * A metadata entry in the metadata view is selectable (TODO).
  * The text inside a metadata entry is selectable (TODO). When selected, it
    becomes editable.


### Label editing

The label of a strip or a section, and the value of a metadata entry (TODO) can
be directly edited by clicking them. When typing `Enter`, the new name is
committed; typing `Esc` cancels the edit. Strips also have an `OK` and `Cancel`
button which achieve the same effects.


## Transport bar and peak meter

### Transport bar buttons

* __Play button__ (`Ctrl+Space`): this button gives Play All command while
starting playback from currently selected block in strip view or currently
selected node in tree view.
  * If there is no in phrase selection, (technically  termed as audio
  selection) this button starts playback from starting of selected block or
  selected tree node.
  * If there is Audio selection and cursor has a position marked inside
  phrase, this button starts playback from this cursor position.
  * TODO: `Ctrl+Space` doesn't seem to work? And should play all;
    `Ctrl+Shift+Space` to play selection (see menu)?

* __Pause button__ (`Space`): pause both playback as well as recording (which
  ever is active). Pause position and cursor position are synchronised with
  each other so pause position also acts as cursor position for operations
  like split and insert recording.

* __Stop button__: stop playback or recording which ever is active.

### Unedited notes

This is a temporary write up for transport bar which should be copied to main manual.
The write up contains description about transportbar buttons and other transport bar functions which are to be invoked through drop down menus and keyboard shortcuts.

Description about buttons:
1. Play button.
This button gives Play All command while starting playback from currently selected block in strip view or currently selected node in tree view.
1.1. If there is no in phrase selection, ( technically  termed as audio selection ) this button starts playback from starting of selected block or selected tree node.
1.2. If there is Audio selection and cursor has a position marked inside phrase, this button starts playback from this cursor position.
Keyboard shortcut: Control+Space.

2. Pause button:
- It pauses both playback as well as recording ( which ever is active ). 
- Pause position and cursor position are synchronised with each other so pause position also acts as cursor position for operations like split and insert recording.
Keyboard shortcut: Space bar.

3. Stop button:
- It stops playback or recording which ever is active.
Keyboard shortcut: control + T 

4. Rewind: It plays small  dhunks of audio while jumping backward in time.
- Rewind continues across phrase boundaries.

5. FastForward button:
It plays small chunks of audio while  jumping forward in time.
- FastForward continues across phrase  boundaries.

6. Prev phrase, prev section, prev page buttons:
Currently these buttons work only while playback and move to prev phrase, prev section, prev page phrase nodes in playlist.

7. Next phrase, Next section, Next page buttons:
During playback:
These buttons move to next phrase, next section , next page phrase nodes in current playlist.

During recording:
These buttons become markup buttons i.e.
Next Phrase button create a new phrase on the fly.
Next section button creates a new section, creates a new phrase in this new section and continue recording in this new phrase.
The rules for  creating new section is same as that of creating a new section in TOC view.
Next Page creates a new phrase and marks custom page class on this new phrase on the fly. The numbering of pages is automatic i.e. an increment of previous page number and "1" if there is no preceding phrase block.

8. Custom class mark button:
While recording it is used for marking custom class on currently recording phrase on the fly. The default name used is "Custom".
It creats a new audio block and mark custom class on it.
These custom blocks can later on be reclassed.
In all other conditions, this button mark custom class on currently selected audio block.


9. Fast play rate combobox:
This combobox increases playback rate above the normal playback rate for quick navigation / editting purpose and proof reading purpose.
It contains valuse upto 2.0 times which is twice the normal playback rate.
It works both on the fly with playback and also off the fly.
The  strips view keyboard shortcuts for this combobox are:
1. F: Increses FastPlay rate by one combobox value.
2. S: decreases FastPlay rate by one combobox value.
3. D: moves back to normal playback rate.
4. E: Move back to normal playback rate with 1.5 seconds of rewind. This is helpfull in determining exact splitting position while  playing at higher speeds.


10. Record button:
Pressing this button first time starts listening and displays input values of microphone in graphical peak meter as well in text peak meter. Recording starts when this button is pressed second time.
However user can start direct recording and bypass listening state by pressing 
Control + shift + R.
or selecting  direct recording sub menu item for record menu item of transport drop down menu.
Recording can be done in normal mode or in append only mode.
User can check or uncheck Append only sub menu item from recording item of transport drop down menu.
10.1 In append only mode, recording is non distructive i.e. a new recording is appended to selected block or filled in a null audio block without inserting or overwriting existing recordings.
10.2. In normal mode recording works as follows:
- If selected block do not contain any audio e.g. empty page blocks, recording fills audio inside these blocks.
- If there is a single point in-phrase selection, recording splits the selected block at cursor position and inserts new blocks between two splitted blocks.
- If there is a part of audio selected  inside a phrase using  in-phrase Selection Start and in-phrase Selection End commands then the selected block is split in three blocks and the middle one is replaced by newly recorded blocks.

Pausing recording:
Recording can be paused at any time using pause button. When recording is paused, user can use playback to verify recording.
Recording will resume by pressing record button again ( no listening stage will be there while resuming paused recording ).



Other transport bar functions  operatable from drop down menus and keyboard shortcuts.
11. Preview playback:
It includes three functions.
1.1. Preview from current position:
provides 1.5 seconds of playback starting from current cursor position.
Strips View shortcut: V

1.2. Preview upto current position:
Provides playback of duration of 1.5 seconds starting from 1.5 seconds before current position so that playback ends at current position.
Strips view shortcut: X

1.3. Preview selected audio:
It provides playback of audio chumk lying between two audio mark points. 
Strips view Shortcut: C

12. Play selection: 
It starts playback of currently selected blocks As Obi currently can select only one block at a time so in current senario it plays selected block in strips view or selected tree node in TOC view.
- If there is no in-phrase selection i.e. cursor is not active, playback starts from begining of phrase 
- if there is a in-phrase selection i.e. cursor is active, then playback starts from the cursor position.
Keyboard shortcut: Space bar.
This shortcut is same as pause. As it toggles between play selection and pause and also pauses play all command.

13. Time display:
Transport bar has a time display which displays both playback as well as recording time.
13.1. Playback time.
The display of playback time is configurable with an adjusant combobox. The available options are:
13.1.1. Elapsed: This displays elapsed selection time.
13.1.2. Elapsed (total): This displays elapsed time with respect to whole book.
13.1.3. Remaining: This displays remaining time for current selection.
13.1.4. Remaining (Total): This displays remaining time with respect to whole book.

13.2. Recording time:
This displays time of recording since it was started i.e. recording session time.


14. Text Peak Meter:
This control displays numerical values for peak meter which can be captured by screenreader.
It has two textboxes for left and right channels. 
Keyboard shortcuts:
Focus Left channel value: Alt+l
Focus right channel value: Alt+i
The value displayed is relative to the peak value of audio with upper range of 0 db.

Whenever overload is reached,  the "OL" tag appears before numerical value of that particular channel.
This tag remains in text display of respective channel till reset button on text meter is pressed. 
Remark: reset button is not visible till  overload is reached.


### Peak meter

The peak meter allows to monitor the input sound level (while recording) or
output level (while playing back), and especially shows when overload occurs.
Overload should be avoided while recording because the recorded audio is
clipped. When overload occurs, the red box above the channel while turn red
with a number indicating the number of occurrences. Users can modify their
audio settings (getting further away from the microphone or turning its volume
down) to reach an acceptable audio level. Clicking on a red overload box will
reset it.


## Menus

This is a description of the main menubar in Obi.

### File menu (`Alt+F`)

Creating and opening projects:

* __New project__ (`Ctrl+N`): create a new project. If there is a project
  currently open, Obi will attempt to close it first. A dialog is shown where
  the user can enter a title for the project and choose a location for saving
  it. TODO: add instructions in the dialog.

* __New project from import__ (`Ctrl+Shift+N`): create a new project by
 importing an XHTML file containing the structure of the project. You will
 have to choose a title (if different from the one given in the file) and
 a location for saving the project.
  * TODO: better error handling (completely undo the import.)
  * TODO: the expected input format must be documented.

* __Open project__ (`Ctrl+O`): bring up a file chooser and select a project
  to open. Obi projects are normally named with a `.obi` suffix, although Obi
  normally saves project inside a directory along with another directory
  containing audio data.

* __Open recent project__: a list of recently opened project allows the user
  to choose between different recent projects. TODO: remove projects that
  failed to be opend from the list.
  * __Clear list__: clear the list of recent projects. This cannot be undone.

Saving projects:

* __Save project__ (`Ctrl+S`): save the project and its data.

* __Save project as__ (`Ctrl+Shift+S`): save the project under a different name
  and switch to the new copy. TODO: this is currently disabled.

* __Close project__ (`Ctrl+W`): close the current project. If there are
  unsaved changes, the user is given the choice to save or not, or cancel.

Clenanig and exporting to DAISY:

* __Clean unreferenced audio__ (`Ctrl+L`): clean unreferenced audio from the
  project. Obi keeps unused audio data so that changes can be undone, but
  sometime there is audio data in the project that is not referenced anywhere
  (_i.e._, there is no phrase with this audio data, nor any command in the
  undo stack that concerns this data.) In order to save disk space, it is
  possible to clean the project by removing all this data. It is recommended
  to save right after cleaning the project, otherwise there may be problems
  when reopening the project. Cleaning the project at the beginning of the
  session makes sure that all of the data not referenced in the project itself
  has been removed. TODO: check that files are indeed removed?

* __Export as DAISY__ (`Ctrl+E`): export the project to DAISY 3. The user can
  choose a directory to export to. The directory should be new or empty; if it
  contains files already (_e.g._, from a previous export), those can be
  deleted before export. TODO: this currently only exports audio data, one file
  per section, named in book order.

Quitting Obi:

* __Exit__ (`Alt+F4`): quit Obi. If there is a project with unsaved changes
  currently opened, changes can be saved before quitting, or quitting can be
  cancelled. Quitting can also be achieved by closing the main Obi window.


### Edit menu (`Alt+E`)

Obi stores all executed commands in an _undo stack_ so that commands can be
undone later. All commands executed since the current project was loaded are
stored so an unlimited number of commands can be undone. Undone commands are
also stored in a _redo stack_ so that an undone command can be redone. Whenever
a new command is executed, the redo stack is cleared.

* __Undo__ (`Ctrl+Z`): undo the last executed command.
  * TODO: save the undo stack in the XUK file.
  * TODO: when the project reverts to the last saved state, mark it as
    unmodified.

* __Redo__ (`Ctrl+Y`): redo the last undone command.

Obi maintains a clipboard that contains the last cut or copied item. Undoing a
cut or copy operation restores the previous value of the clipboard.

* __Cut__ (`Ctrl+X`): delete the selected item (strip, section, block or audio)
  and place it in the clipboard. TODO: works for text as well, but only through
  shortcut; not well integrated.

* __Copy__ (`Ctrl+C`): copy the selected item (strip, section, block or audio)
  and place it in the clipboard. TODO: works for text as well, but only through
  shortcut; not well integrated.

* __Paste__ (`Ctrl+V`): paste the item from the clipboard in or after the
  selection.
  * If the clipboard contains a section node, it can be pasted after the
    selected section in the TOC view or the selected strip in the strip view.
  * If the clipboard contains a block, it can be pasted after the selected
    block, at the end of the selected strip, or at the selection point inside
    a strip. If the selection is a waveform cursor, then the audio of the block
    is inserted at that point; if it is a waveform selection, then the audio
    of the block is pasted in place of the selection.
  * If the clipboard contains audio, the audio can be pasted as a new block
    in the selected strip or at the selected point inside a strip, or at the
    end of the selected block. If the selection is a waveform cursor, then the
    audio is inserted at that point; if it is a waveform selection, then the
    audio is pasted in place of the selection.
  * TODO: text.

* __Paste before__ (`Ctrl+Alt+V`): when a section is selected and a section is
  in the clipboard, paste the section from the clipbaord before the selected
  section and at the same level.

* __Paste inside__ (`Ctrl+Shift+V`): when a section is selected and a section
  is in the clipboard, paste the section from the clipboard as a subsection of
  the selected section. The child is added last.

* __Delete__ (`Del`): delete the selected item. If it is a section, then all
  subsections are deleted as well. If it is a strip, then only this strip is
  deleted. If the corresponding section has subsection, the first subsection
  is moved to the level of the deleted section so that the consistency of the
  TOC is preserved.

* __Select nothing__: deselect any item that was selected.

In addition to cleaning up unreferenced audio data, it is possible to also
clean up _unused_ data from the project.

* __Delete unused data__ (`Ctrl+Shift+L`): delete all sections and phrases
  marked as being unused. This can be undone, just like any deletion in Obi.

Athough Obi is an audio editing tool, a large project can still contain a non
trivial amount of text (section headings, metadata, annotations) so a search
function is provided.

* __Find__ (`Ctrl+F`): bring the search bar in focus and let the user type some
  text to find. The first item containing this text is selected (in the case
  of section titles, the strip corresponding to the section is selected.)

* __Find next__ (`F3`): find the next item. TODO: more details.

* __Find previous__ (`Shift+F3`): find the previous item. TODO: more details.


### View menu (`Alt+V`)

Various views can be shown or hidden. By default, all are shown, except for the
search bar which only appears when searching. Each menu item has a checkbox
that indicate the visibility of the corresponding view (checked meaning
visible.) TODO: all the shortcuts will change as they interfere with screen
readers.

* __Show TOC view__ (`Alt+Shift+T`): show or hide the TOC view.

* __Show metadata view__ (`Alt+Shift+M`): show or hide the metadata view.

* __Show search bar__ (`Alt+Shift+S`): show or hide the search bar.

* __Show transport bar__ (`Alt+Shift+B`): show or hide the transport bar.

* __Show status bar__ (`Alt+Shift+U`): show or hide the status bar.

For easy navigation, there are some shortcuts to move to the main views.

* __Focus on TOC view__ (`F6`): move the focus to the TOC view. If there was
  a selection in the strips view, the corresponding section is selected. TODO:
  there is a display bug so the section doesn't appear as being selected, but
  it is.

* __Focus on Strips view__ (`F7`): move the focus to the strips view. If a
  section is selected in the TOC view, its strip gets selected in the strips
  view.

* __Focus on Transport bar__ (`F8*`): not yet implemented (TODO).

Obi also has external views which open in different windows. Again, shortcuts
are subject to change.

* __Show peak meter__ (`Alt+Shift+P`): show or hide the peak meter view.

* __Show source view__ (`Alt+R`): show the source of the XUK file for this
  project. This is mainly useful for debugging and may be removed from the
  release version.


### TOC menu (`Alt+C`)

The TOC menu provides operations on the table of contents.

* __Add section__ (`Ctrl+A`): add a new section after the selected section
  and at the same level. If no section is selected, then add a new section at
  the top level and at the end.

* __Ad sub-section__ (`Ctrl+Shift+A`): add a new section as the last child of
  the selected section.

* __Insert section__ (`Ctrl+Alt+A`): insert a new section before the selected
  section and at the same level.

* __Rename section__ (`F2`): start editing the label of the section. The new
  name cannot be empty. The change is committed when pressing `Return` or
  cancelled when pressing `Esc`.

* __Move section in__ (`Ctrl+Shift+Left`): increase the level of the section
  by one. The section becomes the first subsection of its previous sibling
  section; as a consequence, the first subsection of a section cannot be
  moved in. Only the section moves, not its subsections.

* __Move section out__ (`Ctrl+Shift+Right`): decrease the level of the section
  by one. Only sections without subsections can be moved out. Top-level
  sections can obviously not be moved out.

* __Section is used__ (`Ctrl+K`): when a section is selected, the menu
  item shows whether the section is used or not with a checkbox. The checkbox
  is checked if the section is currently used. Selecting this item toggles the
  used status of the section (from used to unused, and from unused to used.)
  When the used status of the section changes, all subsections change to the
  same status as well. The status of a section can only be changed if its
  parent section is used (or if it is a top-level section), as there cannot
  be used subsections of unused sections. TODO: this is currently disabled.


### Strips menu (`Alt+S`)

* __Add strip__ (`Ctrl+A`): add a new strip after the selected strip. The
  corresponding section will be at the same level as the section of the
  selected strip. If the section of the selected strip had subsections, they
  become subsections of the new section.

* __Insert strip__ (`Ctrl+Alt+A`): insert a new strip before the selected
  strip.

* __Rename strip__ (`F2`): start editing the label of the strip. The new name
  cannot be empty. The change is committed when pressing `Return` or cancelled
  when pressing `Esc`.

* __Split strip__ (`Ctrl+Shift+P`): split the strip at the selected position
  in the strip, or from the selected block. The new strip has the same label
  and level as the original strip, and all the blocks starting from the split
  position. If the first block or position is selected, there is no effect.

* __Merge strip with next__ (`Ctrl+Shift+M`): merge the selected strip with the
  next one; that is, all the blocks in the following strip are appended to the
  selected strip. The following strip is then removed from the project. If the
  following strip has a lower level than the selected strip, merging is not
  possible.

* __Strip is used__ (`Ctrl+K`): when a strip is selected, the menu
  item shows whether the strip is used or not with a checkbox. The checkbox
  is checked if the strip is currently used. Selecting this item toggles the
  used status of the strip (from used to unused, and from unused to used.)
  This operation can only be executed if the corresponding section has no
  subsection; _i.e._ if the operation affects only the selected strip. The
  contents of the strip are affected as well. TODO: this is currently disabled.


### Blocks menu (`Alt+B`)

* __Add empty block__ (`Ctrl+B`): add a new empty block at the end of the
  selected strip, or after the selected item in the strip.

* __Add empty page blocks__ (`Ctrl+Shift+B`): add one or more empty blocks
  with a page number.  A dialog opens where the user can choose the page
  number for the first block, the number of blocks to add, and whether to
  renumber subsequent page blocks automatically. The page number increases by
  one for each block (_e.g._ if three pages are added starting at page number
  4, the three page blocks will be numbered 4, 5 and 6) and for subsequent
  pages if the user chooses to renumber them (_e.g._ following pages would be
  renumbered 7, 8, 9, etc.)

* __Split block__ (`Ctrl+P`): split the block at the current cursor position.
  The block is split in two blocks, one with all the audio data before the
  cursor position, followed by one with the all the audio data after the cursor
  position.
  * TODO: handle different kinds gracefully.
  * TODO: how to split nested blocks?

* __Merge block with next__ (`Ctrl+M`): merge this audio block with the
  following block. The two blocks are replaced with a block that contains
  the audio of both blocks.
  * TODO: if the blocks were of a different kind, the kind of the first block
    is kept. This means that page numbers may disappear, etc.

* __Block is used__ (`Ctrl+K`): when a block is selected, the menu item shows
  whether the block is used or not with a checkbox. The checkbox is checked if
  the block is currently used. Selecting this item toggles the used status of
  the block (from used to unused, and from unused to used.) TODO: this is
  currently disabled.

TODO: update the rest of the document!

### Transport menu (`Alt+R`)

* __Play__: playback sub-menu.
  * __Play all__ (Ctrl+Space): play from the current selection, or the
    beginning of the book if nothing is selected, until the end of the book is
    reached.
  * __Play selection__ (`Ctrl+Shift+Space`): play the current selection, or
    if a cursor is positionned inside a block, until the end of the block.

* __Pause/Resume__: pause or resume playback.

* __Stop__: stop playback.

* __Record__: recording sub-menu.
  * __Start listening__:
  * __Start recording__:
  * __Allow overwrite__:


### Tools menu

### Help menu
