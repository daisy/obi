# Reference manual for Obi 1.0

`$Id$`

<div id="toc">Table of contents</div>

Now this is really the reference section.

## Views

The work area of Obi is composed of several views, as described below. All
views (except for the strips view) can be shown or hidden as necessary.

### Strips view

The main view is the _strips view_. This is the view in which the contents of
the book are edited. There is a strip for every section in the book and they
appear in book order in the strips view. Inside each strip the actual contents
appear as blocks.

#### Strips

A _strip_ represents a section and its contents. Subsections are represented as
other strips that follow in the strip view. Contents are represented as blocks
which are shown in book order inside the strip. A strip fills the entire width
of the strips view and has two parts:

1. an editable label showing the title of the section;

2. a sequence of zero or more blocks.

#### Blocks

A _block_ is used to represent an unit of content in the strips view. A block
can be empty or contain audio. The audio content of a block is called a
_phrase_ as it allows for the reader to skip easily from phrase to phrase
when the book is exported to DAISY. Obi does not impose any limitations on
the amount of audio that a block may contain.

#### Different kinds of blocks

* _Empty blocks_ are blocks that contain no audio. They can be used as
  placeholders for adding audio at a later time. An empty block only contains
  an information label. TODO: describe contents of label; something like "block
  _n_ of _m_."

* _Plain blocks_ are blocks that contain audio. In addition to the information
  label, the waveform of the audio is displayed.

* _Page blocks_ are blocks that represent a page number. The corresponding
  phrase is usually a reading of the page number. An actual number is
  associated with the block. Example: page number 42 in the book can be
  represented by a page block bearing the number 42 and the phrase "page
  42." In the exported DAISY book, a page block will be skippable.

* _Silence blocks_ are used for phrase detection; see below.

* _Custom blocks_ are blocks that have some additional property in the current
  book (such as producer notes, side bars, etc.) These can be defined by the
  producer of the book as needed. In the exported DAISY book, custom blocks
  will be skippable.

__Note:__ future versions of Obi will have _container blocks_ that can hold
other blocks to create escapable structures, such as lists or audio tables,
but they are not included in the current release of Obi.

### TOC view

The _table of contents view_ (_TOC view_ for short) shows the table of contents
of the book in a hierarchical way. Each entry in the table of contents is
called a _section_; this is a generic Obi term, and can be a book part,
chapter, section, subsection, etc. The level of each section is shown by its
indentation. As noted above, there is a corresponding strip for every section
in the TOC view.

### Metadata view

The _metadata view_ shows the metadata of the book: information such as title,
narrator, date of publication, etc. Metadata entries can be edited in this
view.

### Transport bar and peak meter

The _transport bar_ is used for recording and playback of the book. It has
buttons such as play, record, or stop; a time display; and a textual peak
meter. In addition to the transport bar, an external peak meter can also be
shown alongside Obi's main window.

## Selection

All edits in Obi are based on the current selection. In the current version of
Obi, only a single selection can be made at once (future versions of Obi will
have multiple selection.)

In general, selection is performed by clicking (and possibly dragging) on the
object or area to select; keyboard users can navigate to the desired region
to select (see keyboard navigation below.)

### What is selectable?

* In the strips view:
  * A strip is selectable.
  * The label of a strip is selectable. When selected, the label becomes
    editable.
  * A position inside a strip is selectable. The position can be before the
    first block, after the last block, or between two blocks.
  * A block inside a strip is selectable.
  * The waveform in a block is selectable; either a position or a range of
    audio.
* In the TOC view:
  * A section is selectable.
  * The text label of a section is selectable. When selected, it becomes
    editable.
* In the metadata view:
  * A metadata entry in the metadata view is selectable (TODO).
  * The text inside a metadata entry is selectable (TODO). When selected, it
    becomes editable.

## Transport bar and peak meter

### Controls

### Playback

### Recording

### Peak meter

## Menus

### File menu

### Edit menu (`Alt+E`)

Obi stores all executed commands in an _undo stack_ so that commands can be
undone later. All commands executed since the current project was loaded are
stored so an unlimited number of commands can be undone. Undone commands are
also stored in a _redo stack_ so that an undone command can be redone. Whenever
a new command is executed, the redo stack is cleared.

* __Undo__ (`Ctrl+Z`): undo the last executed command.
  * TODO: save the undo stack in the XUK file.
  * TODO: when the project reverts to the last saved state, mark it as
    unmodified.

* __Redo__ (`Ctrl+Y`): redo the last undone command.

Obi maintains a clipboard that contains the last cut or copied item. Undoing a
cut or copy operation restores the previous value of the clipboard.

* __Cut__ (`Ctrl+X`): copy then delete the selected item. See description for
  both commands below.

* __Copy__ (`Ctrl+C`): copy the selected item into the clipboard. When a section
  is selected, all of its subsections are also copied, but when a strip is
  selected, this strip only is selected.
  * TODO: copy a chunk of audio data.
  * TODO: copy text.
  * TODO: copy metadata (how exactly?)

* __Paste__ (`Ctrl+V`): paste the item in the clipboard in the current context.
  * When the clipboard contains a strip or section (_i.e._ a section and
    possibly subsections)...
      * ... and a section is selected: paste a copy of the section in the
      clipboard as the next sibling of the selected section.
      * ... and a strip is selected: paste strips right after the selected
      strip; the pasted section is at the same level as the section of the
      selected strip.
      * ... and a block is selected: same as if the strip in which the block is
      was selected (TODO)
  * When the clipboard contains a block...
      * ... and a section or strip is selected: paste a copy of the block at
      the end of the strip (or the strip for the section.)
      * ... and a block is selected: paste a copy of the block in the clipboard
      after the selected block.
  * TODO: impement dummy section in the TOC view to always have a selected
  item to paste after, and being able to paste at the beginning.
  * TODO: implement dummy strip.
  * TODO: implement dummy block.
  * TODO: paste text.
  * TODO: paste audio data.

* __Delete__ (`Del`): delete the selected item. If it is a section, then all
  subsections are deleted as well. If it is a strip, then only this strip is
  deleted. If the corresponding section has subsection, the first subsection
  is moved to the level of the deleted section so that the consistency of the
  TOC is preserved.
  * TODO: delete a chunk of audio data. (Delete text works out of the box.)
  * TODO: trim audio data? (but this is not a generic edit function.)

* __Select nothing__ (`Alt+N`): deselect any item that was selected.
  * TODO: change the keyboard shortcut.

Athough Obi is an audio editing tool, a large project can still contain a non
trivial amount of text (section headings, metadata, annotations) so a search
function is provided.

* __Find__ (`F3`): bring the search bar in focus and let the user type some
  text to find. The first item containing this text is selected (in the case
  of section titles, the strip corresponding to the section is selected.)

  * TODO: quick find with `/` as in `vi`.
  * TODO: search metadata.
  * TODO: buttons in the search bar (previous, next?)
  * TODO: replace?

### View menu (`Alt+V`)

* __Focus on Strips view__ (`F6`)

* __Show source view__ (`Alt+R`): show the source of the XUK file for this
  project. This is mainly useful for debugging and may be removed from the
  release version.
  * TODO: change keyboard shortcut.


### TOC menu (`Alt+C`)

The TOC menu provides operations on the table of contents.

* __Add section__ (`Ctrl+A`): add a new section after the selected section
  and at the same level. If no section is selected, then add a new section at
  the top level and at the end. TODO: dummy section (adding before the first
  section.)

* __Ad sub-section__ (`Ctrl+Shift+A`): add a new section as the last child of
  the selected section.

* __Rename section__ (`F2`): start editing the label of the section. The new
  name cannot be empty. The change is committed when pressing `Return` or
  cancelled when pressing `Esc`.

* __Move section in__ (`Ctrl+Shift+Left`): increase the level of the section
  by one. The section becomes the first subsection of its previous sibling
  section; as a consequence, the first subsection of a section cannot be
  moved in. Only the section moves, not its subsections.

* __Move section out__ (`Ctrl+Shift+Right`): decrease the level of the section
  by one. Only sections without subsections can be moved out. Top-level
  sections can obviously not be moved out.

* __Section is used__ (`Ctrl+K`): when a section is selected, the menu
  item shows whether the section is used or not with a checkbox. The checkbox
  is checked if the section is currently used. Selecting this item toggles the
  used status of the section (from used to unused, and from unused to used.)
  When the used status of the section changes, all subsections change to the
  same status as well. The status of a section can only be changed if its
  parent section is used (or if it is a top-level section), as there cannot
  be used subsections of unused sections.


### Strips menu

* __Rename strip__ (`F2`): start editing the label of the strip. The new name
  cannot be empty. The change is committed when pressing `Return` or cancelled
  when pressing `Esc`.

* TODO: add strip, depending on cursor or strip selection.

### Blocks menu (`Alt+B`)

* __Add empty block__ (`Ctrl+Alt+A`): add a new empty block at the end of the
  selected strip, or after the selected item in the strip.

* __Split block__ (`Ctrl+P`): split the block at the current cursor position.
  The block is split in two blocks, one with all the audio data before the
  cursor position, followed by one with the all the audio data after the cursor
  position.
  * TODO: handle different kinds gracefully.
  * TODO: how to split nested blocks?

* __Merge block with next__ (`Ctrl+M`): merge this audio block with the
  following block. The two blocks are replaced with a block that contains
  the audio of both blocks.
  * TODO: if the blocks were of a different kind, the kind of the first block
    is kept. This means that page numbers may disappear, etc.

### Transport menu

### Tools menu

### Help menu
