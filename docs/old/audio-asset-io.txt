Audio asset I/O
$Id$


WARNING: right now this document is not in sync with the source code, so in
case of conflict, please refer to the code.

This document specifies more clearly the actual handling of files by the
asset manager for audio assets. The goal of the asset manager is to free the
application from having to manage files and concentrate on assets.


1 Virtual edits and sequential media

1.1 Audio clips

The audio clip is the minimal component that we define. A clip describes a
continuous chunk of audio contained in a physical file. Audio assets are
made of audio clips, all of which share the same format (bit depth, sample
rate, channels, etc.) so there is no need to keep that information. A clip
is defined by three parameters:

  * the path of the physical file
  * the begin time of the clip
  * the end time of the clip

1.2 Audio assets

An audio asset is a collection of clips, all of which have the same formats.
To the application, an audio asset will look like a single unit, and behave
like one. An audio asset is defined by three parameters:

  * a text label
  * an audio format
  * a list of clips

1.3 Changes from milestone 1

1.3.1 Changes to IMediaAsset

* Path is removed because a media asset is not necessarily a single file.
* file is removed for the same reason.

1.3.2 Changes to IAudioMediaAsset

* AudioLengthBytes is changed to AudioLengthInBytes for consistency.

Of course, now that a media asset is a collection of clips, methods such as
LengthInMilliseconds and AudioLengthInBytes should return the total length
of the asset, that is the sum of the lengths of the clips.

1.3.3 Changes to IAudioPlayer

The interface to IAudioPlayer can be rethought a bit to make it more
consistent with IAudioMediaAsset. This concerns the Play() methods:

* void Play(IAudioMediaAsset asset) plays the asset
* void Play(IAudioMediaAsset asset, long begin, long end) plays from begin
byte position to end byte position
* void Play(IAudioMediaAsset asset, double begin, double end) plays from
begin time to end time (in milliseconds.)

1.4 No IAudioClip interface

Clips are implementation-dependant so there is no interface for them. See
the stub of the AudioClip class.


2 Creating an asset

2.1 Creating a new asset from scratch

The new asset is created from a given set of parameters. No audio data will
exist at this point and the list of clips is empty. Presumably, new assets
will be created by the application once the user has selected parameters for
audio recording so all parameters are known.

* AudioMediaAsset(int channels, int bitDepth, int sampleRate)

A default name is given to the asset.

2.2 Creating a new asset from a Sequential object

The Urakawa toolkit defines the Sequential Media object, which is what the
assets will be mapped to (i.e., audio objects in the core tree will be
sequential media objects.) The list passed as argument is a list of AudioClip
objects. The first clip's file will give the parameters for the asset, and
the files for the other clips must have the same parameters. The audio data
for the asset is read from the files pointed to by every clip in the list.

* AudioMediaAsset(ArrayList clips)

A default name is given to the asset.

2.3 Copying assets and clips

A copy of an asset means that the new asset is created from an existing one,
sharing the same format information. The clips are copied so that the list
of clips for both assets are identical.

* AudioMediaAsset Copy()

Copying a clip means creating a new clip object with the same information as
the original one; no physical data is copied.

* AudioClip Copy()

2.4 Adding assets to the project

The assets are always created through the asset manager. There is a general
method for creating assets:

* IMediaAsset NewAsset(TypeOfMedia assetType)

However, this method is not very useful for creating audio assets as both
asset creation methods need more data, so the AssetManager implementation
provides two additional methods:

* AudioMediaAsset NewAudioMediaAsset(int channels, int bitDepth, int sampleRate)
* AudioMediaAsset NewAudioMediaAsset(ArrayList clips)

These two methods create a new audio asset, insert it in the list of "loved"
assets (see below) and return it.


3 Inserting and deleting audio in an asset

3.1 Inserting data from live recording

The recorder will add data to an asset by simply appending bytes. The asset
will actually create a new clip for the added bytes to save data to an
existing or a new file and add this clip to the asset.

In IAudioMediaAsset: void AppendByteBuffer(byte[] buffer)

3.2 Inserting data from existing clips

3.2.1 Getting existing data from an asset

Since we are dealing with virtual files we can create assets that point to
the same data without any problem; so instead of simply getting a byte
buffer from an existing we can get a chunk of an asset as an asset itself.

In IAudioMediaAsset: IAudioMediaAsset GetChunk(...)

There are two variants of the method, as we can give the start and end
positions as time (in milliseconds) or position (in bytes.)

The new asset's list of clips is computed as follows: the clip in the
original asset where the start time appears may need to be split; as well as
the clip where the end time appears. The list of clips of the new asset is
the second part of the first clip, followed by all clips until the first
part of the last clip. See below for splitting clips.

The new asset does not need to go into the asset manager as it is a
transient asset. Check with undo/redo.

3.2.2 Inserting existing data into an asset

Once a chunk was obtained from the above function, it can be inserted into
another asset (this is what happens when the user does copy/paste
operations.)

In IAudioMediaAsset: void InsertAsset(...)

There are two variants, where the insertion point is specified by time or
position.

The clip where the insertion point appears may need to be split (see below.)
Then the list of clips from the asset to insert is inserted in between the
two parts of the split clip.

Note: this replace InsertByteBuffer in the previous interface.

3.2.3 Splitting clips

When we need data starting from the middle of a clip, it needs to be split.
Splitting a clip is simply creating a new clip pointing to the same file,
with a begin time at the time of the split and the same ending time as the
original clip. The original clip is in turn modified so that its end time
matches the splitting point/begin time of the new clip.

There is no merge function in AudioClip; however, if an asset happens to
have two consecutive clips with corresponding ending/beginning time, they
could be replaced by a new single AudioClip.

3.3 Deleting data from an asset

DeleteChunk() now returns the chunk of data that was deleted, just as
GetChunk() does. This means this asset can be pointed to for undo/redo.

Implementation note: this can be done as a combination of GetChunk() and
removing the unneeded clips from the original asset.


4 Merging, splitting and phrase detection

4.1 Merging two assets

This is defined in IMediaAsset; the MediaAsset implementation is virtual so
a new implementation has to be provided in AudioMediaAsset. The asset to
merge with another one is modified in place and the next one should be
discarded afterwards. Only the clip lists is modified.

4.2 Splitting an asset

This is defined in IAudioMediaAsset. Split the clip lists; return the second
asset. Once again the split point is given either by position or time.

4.3 Applying phrase detection to an asset

Make tons of new assets.


5 Saving and deleting assets

5.1 Saving an asset

In the virtual edits world, saving an asset does not really have any effect.
However, if necessary, physical files could be modified so that assets would
not be too spread out. This is probably an improvement for later versions.

5.2 Deleting an asset

Move the asset to the unloved list.


6 Undo and Redo


