# Description of playback behaviour

`$Id$`

Authors: Avneesh (first draft), Laust, Dipendra, Julien (contributors)

<div id="toc">Table of contents</div>

## 0. Preliminary notes

* Playback currently disables many editing options so that the playlist
doesn't get confused by changes (obvious exception: splitting.) The playlist
needs to be upgraded to become more dynamic so that it can accomodate
changes on-the-fly (e.g. deleting the phrase currently playing moves to the
next phrase.)

* On the other hand, recording is modal: it takes over the application and
offers only its limited set of operations (marking, stopping, etc.)


## 1. Playback behaviour in StripManager with respect to keyboard navigation.

### 1.1. A phrase will play by itself whenever keyboard focus arrives on it through StripManager navigation commands.

__LNN__: This is likely preferrable by visually impaired users, but highly limiting for sighted user, since it disable many editing comands untill playback has stopped. I would suggest that me make it a user preferrence whether automatic start of playback is enabled or not.

__Julien__: I would make the defaults to be: start playback when moving
through keyboard, but not when clicking, but I agree with a prefrence
setting. Also, see section 0 for playback issue.

List of commands are:

* 1.1.1. Right Arrow for next phrase.
* 1.1.2. Left Arrow for prev phrase
* 1.1.3. Down Arrow for first phrase of next section.
* 1.1.4. Up Arrow for first phrase of prev section.
* 1.1.5. Home Key for first phrase in current section.
* 1.1.6. End Key for last phrase in current section.
* 1.1.7. Ctrl + Home for first phrase in project.
* 1.1.8. Ctrl + End for last phrase in project.
* 1.1.9. PageUp for  neareast phrase marked with page number in upward direction.
* 1.1.10 PageDown for nearest phrase marked with page number in downward direction.
* 1.1.11. For multiple selection Shift key should be used with all of above listed Keyboard shortcuts.

__LNN__: Are we going to do multiple selection in Obi in the near future?

__Julien__: Eventually, yes. But I am not sure that I see the point of
1.1.11. 

Remark: Left arrow and right arrow should not jump section e.g. navigation with right key should stop when  last phrase of current section is reached.

__Julien__: should this be a preference as well? (With above behavior as
default.) But we should also try not to have too many
settings/preferences...


### 1.2. Playback can be started by user in two modes by using playback commands. 

####  1.2.1. Play modes with Keyboard shortcuts

* 1.2.1.1. Space to play current phrase selection. __Julien__: or current
  section selection (all phrases in the strip, from first to last), or all
  phrases in multiple selection (when we do have multiple selections.)
* 1.2.1.2. Ctrl + Space for play all from current phrase.

__Julien__: we need to expand this section to include fast forward/rewind
and pause/stop. I want the space bar to switch between play and pause
easily.

#### 1.2.2. Further behavioural discription of two playback modes

* 1.2.2.1. There should be direct transition from Play Selection mode to Play all mode and vice-versa without going through cycle of pause or stop i.e. if playback in one mode is going on, it is automatically stopped when command of playing in different playback mode is given. __Julien__: this seems tricky; I would give this low-priority.
* 1.2.2.2.  While in playing state, all keyboard navigation command should work without breaking of playback or playback mode.
* 1.2.2.3. While in paused or stopped state, all keyboard navigation commands should start playback in play single phrase mode.


### 1.3. Audio editing during playback.

#### 1.3.1. Editing commands

Editing Commands in Context menu and drop down menu should be Conditionally  visible (conditions should be other than playback states) during playback.

__Julien__: this needs to be reviewed when we implement multiple selection. Some things, e.g. moving contiguous phrases, should not be any problem. Also we can introduce a container block that sidesteps the issue.

* Split: Should be enabled only when a single phrase is selected. 
* Phrase detection: Should be enabled only when single phrase is selected.
* Move Audio block: Should be enabled only when single phrase is selected.
* Cut and copy: should be enabled if anything of phrase or section  is selected including multiple selection.
* Paste: Enabled only when a single phrase or a single section is selected.
* Import audio files: enabled only when a single phrase or a single section is selected.
* Delete phrase: Should be enabled when a phrase or multiple phrases are selected.
* Merge phrase: should be visible on single  as well as multiple selection if we decide on merge multiple phrases. This multiple merge has to be discussed on friday skype call.

__Avn__:  Quick split do not fall in above list as it needs playback to work 

#### 1.3.2. Editing and playback

On giving Editing command playback should stop/pause and resume conditionally (depending on requirements of command) after command execution is complete 
E.g. playback behaviour of quick split and split.

* __LNN__: Behavior for cut to clipboard?
  * __Avn__: for cut playback should stop in play current selection mode and should continue in play all mode
  * __Avn__:  for copy  playback should continue as it is 
* __LNN__: Behavior for paste section from clipboard?
* __LNN__: Behavior for paste audio block from clipboard?
  * __Avn__:  for pasting section/AudioBlock from clipboard Current playback should stop but do not feel a need to resume playback (going with screen reader behaviour) but if we decide to do all this on fly i.e. without breaking play all playback mode, playback from just pasted node should resume.
* __LNN__: Behavior for Insert new section as child?
* __LNN__: Behavior for Insert new section as previous/following sibling?
  * __Avn__: Playback should stop and for resuming:  new section is empty so there is nothing to play
* __LNN__: Behavior for Record?
  * __Avn__: Playback should not resume after recording is complete 
* __LNN__: Behavior for Split?
  * __Avn__: Quick split requires resuming of playback while split do not
* __LNN__: Behavior for Phrase detect?
  * __Avn__: Playback should not resume 
* __LNN__: I expect that many of these commands would need to stop playback, and the manner of resuming playback in each case must be specified.

__Dipendra__:  All other commands except quick split should stop playback without resuming it again 

__Julien__: This is close to the current behavior (not resuming.) But I would consider that resuming after changes in "play all" mode would help make edits on the fly quickly so it would be worthwile to allow that.

### 1.4. Playback behaviour during multiple selection.

* 1.4.1. Newly selected phrase should play on recieving focus by strip manager selection shortcut or atleast provide a short playback preview.
* 1.4.2. Newly deselected phrase should also play on StripManager deselecting shortcut or atleast provide a small playback preview.

__LNN__: This behavior is also extremely specific to visually impaired users. We should offer the option of disabling it in the user settings.

__Julien__: Another possibility is to think of audio cues for various events
that give audio feedback to users, like two different kinds of beeps when a
block is selected or deselected. This can be turned off but could be useful
for visual editing as well.


## 2. Behaviour of playback with respect of  mouse use in strip manager.

Self triggered playback is not required on selecting  phrases with mouse. This should be done by giving playback commands.

### 2.1. Mouse commands for playback.

* 2.1.1. Double click for play current phrase. __Julien__: or rather, selection.
* 2.1.2. Play selection command from context menu for playing selection.
* 2.1.3. Play button from transport bar for play all.
  * __LNN__: If we do enable multiple selection, I would expect the play button on the transport bar to just play the selected elements when more than one element is selected.
  * __Julien__: We have a problem currently in Obi in that there is no audio
  cursor like in most sound editing application. At the moment you can only
  select a full audio block, not some position inside this block (even
  though there is a current time position, the user cannot set it directly.)
  When we add waveform editing, we need such a cursor in which case it is
  easier to distinguish between "play all from this point" (current behavior
  of play button) or "play selection" (which could be the behavior that
  Laust suggests, not just for multiple selection but any selection.) One
  way to implement that without wave editing could be to separate time
  selection from block selection but this is tricky.

Remark: with mouse also there should be direct transition between playback modes without going through commands like pause or stop.

__LNN__: If there is a keyboard shortcut for it, I don't think that there needs to be a direct mouse command. The only way a mouse command could be considered "direct" would be to add an additional button to the transport bar.

__Avn__:  more explanation through example: if playback in play all mode is going, mouse command for play single selection  i.e. double click should on itself trigger stop followed by PlayCurrent Phrase command


### 2.2. Some suggestions for selection in strip manager using mouse:

* 2.2.1. Single click for selecting single phrase.
* 2.2.2. Horizontal dragging of mouse for selecting series of phrases.
* 2.2.3. Vertical dragging of mouse for spanning selection to next or prev
section. This selection behaviour is similar to that used in text editors.
  * __LNN__: If we do multiple select, we should let holding CTRL while pressing element signify adding or removing elements from the selection, in a similar manner to what Explorer does in Windows.
  * __Dipendra__:  Shift + left mouse click should also be used for selection i.e. single left click is used for selecting current phrase, say phrase P1 then shift + left click on another phrase say P2 will select all phrases between Phrase P1 and phrases P2 including P1 and P2 
  * __Julien__: we have to see what happens when multiple selection crosses
  section boundaries (do we allow mixed selection, of section strips and
  phrases, or do we switch from phrase mode to section mode?), and what to
  do about non-contiguous selection (throught the ctrl+click mechanism);
  namely, I say we allow it because it is useful and we can do:
* 2.2.4. Smart selection: we can select all unused phrases, all empty phrases, all pages, etc. through some scroll-down menu.


## 3. Playback behaviour in TOC view with respect to keyboard.

### 3.1. There is no self triggering of playback required in  TOC view.

__LNN__: This seems like inconsistent behavior to me.

__Julien__: Exactly. The behaviour should be the same as the one we have for
the strip view. In this case, the heading for the section would play if
there is self-triggering.

__Julien__: If we do audio cues, we need some specific ones (e.g.
expanding/collapsing sections; moving in and out...)

### 3.2. Playback modes are same as in strip manager with same shortcut keys as listed in section 1.2.1.

__LNN__: Should "play selection" play the entire selected subtree, or just the strip that matches the heading?

Remark: There is only one difference between playback behaviour in TOC view in contrast with strip manager i.e. the selection in TOC view has least count of a strip corresponding to a section while selection in strip manager has least count of a phrase.

__Julien__: I would consider playback in the TOC as simply playback of the
phrases in the headings of each section. Maybe that's what is meant above,
but I want it to be said explicitely.

## 4. Playback in TOC view with respect to mouse.

### 4.1. Mouse playback commands:

* 4.1.1. For playing current selection play selection command from context menu can be used.
* 4.1.2. For play all, play button on transport bar may be used.

__LNN__: I have the same opinion here on using mouse for playback, as I do in the  strips view centric playback.


### 5 Fast play
Fastplay means playing at higher playing speed.
It is different from Fastforwrd as fast play means playing at higher speeds without breaking continuity of playback   while Fast forward plays small chuncks while jumping
forward in time.  
This feature is extremely useful for proof reading and for audio editting by power users.
Fast play already exists in backend audioplayer, we need to implement it in front end.

### 5.1 Front end implementation:
we need to add a combobox in transport bar containing values like.
- Normal.
- 1.1. times.
- 1.25 times.
- 1.33 times.
- 1.5 times.
- 1.66 times.
- 2 times.
These are not final values but good for example in this text.
### 5.1.1. Whenever play command is given may be from play button, drop down menu or shortcut key, playback start playing with Fast play rate selected in combobox
described in above text.
### 5.1.2 if  playback is going on, selecting playback speed from combovox will change playback speed. on the fly

### 5.2. Use of keyboard shortcuts for fastplay.
### 5.2.1. For strip manager we can have following behaviour:
We can use three single key shortcuts for it,
each having following purpose.
- Speed up: for increasing playback speed incrementally as in Fast Forward.
- Speed Down: Decrease playback speed incrementally.
- Speed Normal.: Return to normal speed.
Remark: Speed down can not go below normal speed.
We can also exclude Speed down shorcut and use rotory behaviour in speed up. i.e. keep on increasing speed when speed up shortcut is pressed till top speed
is reached and drop down to normal speed on next press of speed up shortcut.

Speed Normal shortcut when used on fly should follow lapse back behaviour. Explanation with help of an example:
A user wants to quick split while fast play.
- He Starts playback and use speed up to increase playback speed.
- He reaches the split point.
- Now he can use Quick split shorcut directly or if he is not confident to do it at such a high playback speed, he can  press speed normal shortcut key.
- This wil start playback 1 to 2 seconds before the current play position such that user can decide split point on normal playback speed and use quick split
on the fly.
- After quick split he can again increase playback speed using speed up shortcut key and continue like this.
